import turtle
import math

def dibujar_circulo_dda(cx, cy, radio):
    # Configuraci√≥n de la pantalla de turtle
    pantalla = turtle.Screen()
    pantalla.title("C√≠rculo con DDA y Turtle")
    pantalla.bgcolor("black")
    
    # Configuraci√≥n del objeto turtle
    lapiz = turtle.Turtle()
    lapiz.speed(1)
    lapiz.penup()
    
    # Inicializaci√≥n de variables
    x = radio
    y = 0
    theta = 0
    pasos = 100  # N√∫mero de pasos, puedes ajustar este valor
    incremento_theta = (2 * math.pi) / pasos
    
    # Dibujar el c√≠rculo y mostrar coordenadas
    for i in range(pasos + 1):
        x = radio * math.cos(theta)
        y = radio * math.sin(theta)
        
        # Coordenadas reales trasladas al centro del c√≠rculo
        real_x = cx + x
        real_y = cy + y
        
        # Dibujar el punto y mostrar las coordenadas
        print(f"Coordenada {i}: ({real_x:.2f}, {real_y:.2f})")
        lapiz.goto(round(real_x), round(real_y))
        lapiz.dot(3, "red")
        
        # Incrementar el √°ngulo theta
        theta += incremento_theta
    
    # Mantener la ventana abierta hasta que se cierre manualmente
    pantalla.mainloop()

# Ejemplo de uso
dibujar_circulo_dda(0, 0, 100)

'''
Explicaci√≥n del C√≥digo:
Importaci√≥n de Librer√≠as:

turtle para gr√°ficos y math para funciones matem√°ticas como cos y sin.
Funci√≥n dibujar_circulo_dda:

Configuraci√≥n de la pantalla y el objeto turtle: Se configura la pantalla y el objeto Turtle para el dibujo.
Inicializaci√≥n de variables: Se inicializan las variables para las coordenadas (x, y), el radio del c√≠rculo, el √°ngulo theta y el n√∫mero de pasos pasos para definir la precisi√≥n del c√≠rculo.
C√°lculo de incremento de √°ngulo: Se calcula incremento_theta, que es el √°ngulo que se incrementar√° en cada paso.
Bucle de trazado: Un bucle se utiliza para calcular las coordenadas (x, y) del c√≠rculo en cada paso utilizando las funciones cos y sin. Las coordenadas se trasladan al centro del c√≠rculo (cx, cy), y luego se dibuja el punto en esas coordenadas utilizando turtle.
Impresi√≥n de las coordenadas: Las coordenadas calculadas se imprimen en la consola.
Uso de la Funci√≥n:

La funci√≥n se llama con el centro del c√≠rculo (0, 0) y el radio 100. Puedes cambiar estos valores para dibujar c√≠rculos en diferentes posiciones y tama√±os.
Este algoritmo traza puntos a lo largo del per√≠metro del c√≠rculo utilizando la f√≥rmula param√©trica del c√≠rculo: 
ùë•
=
ùëü
cos
‚Å°
(
ùúÉ
)
x=rcos(Œ∏) y 
ùë¶
=
ùëü
sin
‚Å°
(
ùúÉ
)
y=rsin(Œ∏). El uso de DDA en este contexto se aplica al incremento uniforme del √°ngulo para obtener puntos a lo largo de la circunferencia del c√≠rculo.
'''
